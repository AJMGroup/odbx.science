worker_processes 1;
user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
#error_log  /var/log/nginx_error.log info;

pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  sendfile on;
  include mime.types;
  #access_log /var/log/nginx_access.log combined;

  upstream gunicorn {
    server unix:/tmp/gunicorn.sock fail_timeout=0;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    listen 443 ssl;
    ssl_certificate /keys/odbx_science.crt;
    ssl_certificate_key /keys/odbx.science.key;

    # set the correct host(s) for your site
    server_name _;

    keepalive_timeout 5;

    # path for static files
    root /usr/share/nginx/html/;

    # independently proxy css/js files to get the correct mime type
    location /css {
        include mime.types;
        add_header Content-Type text/css;
    }

    location /js {
        include mime.types;
        add_header Content-Type application/javascript;
    }

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://gunicorn;
    }

    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
      #root /path/to/app/current/public;
    #}
   }
}
